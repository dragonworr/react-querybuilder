/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var sqlParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,4],$V2=[2,4],$V3=[1,11],$V4=[1,10],$V5=[2,16],$V6=[1,14],$V7=[1,15],$V8=[1,16],$V9=[6,8],$Va=[2,145],$Vb=[1,19],$Vc=[1,20],$Vd=[16,33,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Ve=[16,18,32,33,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Vf=[2,159],$Vg=[1,29],$Vh=[6,8,14,17,144,148,150,152],$Vi=[1,42],$Vj=[1,61],$Vk=[1,53],$Vl=[1,60],$Vm=[1,62],$Vn=[1,63],$Vo=[1,64],$Vp=[1,65],$Vq=[1,66],$Vr=[1,59],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,43],$Vy=[1,44],$Vz=[1,45],$VA=[1,47],$VB=[1,34],$VC=[1,67],$VD=[16,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$VE=[6,8,14,17,148,150,152],$VF=[2,142],$VG=[1,76],$VH=[1,77],$VI=[6,8,14,17,43,131,136,142,144,148,150,152],$VJ=[1,80],$VK=[1,79],$VL=[1,81],$VM=[6,8,14,17,36,43,49,50,51,71,72,74,77,89,107,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$VN=[6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,107,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$VO=[1,100],$VP=[1,98],$VQ=[1,99],$VR=[1,96],$VS=[1,97],$VT=[1,101],$VU=[1,102],$VV=[1,103],$VW=[1,104],$VX=[1,105],$VY=[1,106],$VZ=[2,104],$V_=[6,8,14,17,34,36,43,45,49,50,51,71,72,74,77,79,81,89,93,94,95,96,97,98,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$V$=[6,8,14,17,34,36,43,45,49,50,51,71,72,74,77,79,81,89,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$V01=[1,108],$V11=[1,115],$V21=[2,64],$V31=[1,117],$V41=[16,35,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$V51=[16,29,35,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,119,193],$V61=[1,160],$V71=[17,43],$V81=[6,8,14,16,17,34,35,36,43,45,49,50,51,54,55,57,58,60,67,71,72,74,76,77,79,81,82,83,84,86,87,88,89,90,91,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180,190,191,192,193],$V91=[2,59],$Va1=[1,170],$Vb1=[1,168],$Vc1=[1,169],$Vd1=[6,8,136,144],$Ve1=[16,35,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Vf1=[6,8,14,17,136,142,144,148,150,152],$Vg1=[6,8,14,17,36,43,49,50,51,71,72,74,77,89,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$Vh1=[6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,93,94,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$Vi1=[6,8,14,17,34,36,43,49,50,51,71,72,74,77,79,81,89,93,94,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$Vj1=[16,35,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Vk1=[16,35,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Vl1=[16,35,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Vm1=[71,74,77],$Vn1=[16,35,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$Vo1=[1,232],$Vp1=[1,233],$Vq1=[6,8,14,17],$Vr1=[6,8,14,17,43,155],$Vs1=[1,250],$Vt1=[1,246],$Vu1=[2,196],$Vv1=[1,254],$Vw1=[1,255],$Vx1=[6,8,14,17,43,127,133,136,142,144,148,150,152,180],$Vy1=[1,257],$Vz1=[1,260],$VA1=[1,261],$VB1=[1,262],$VC1=[1,263],$VD1=[2,173],$VE1=[1,259],$VF1=[6,8,14,17,36,43,89,127,133,136,142,144,148,150,152,162,163,165,166,171,175,177,178,180],$VG1=[6,8,14,17,133,136,142,144,148,150,152],$VH1=[1,275],$VI1=[2,178],$VJ1=[168,171],$VK1=[6,8,14,17,36,43,89,127,133,136,142,144,148,150,152,162,163,165,166,171,175,177,178,180,190,191,192],$VL1=[2,198],$VM1=[1,280],$VN1=[1,292],$VO1=[1,300],$VP1=[1,301],$VQ1=[1,302],$VR1=[6,8,14,17,136,144,148,150,152],$VS1=[1,312],$VT1=[1,318],$VU1=[1,319],$VV1=[2,203],$VW1=[1,330],$VX1=[16,150],$VY1=[6,8,14,17,150,152],$VZ1=[1,346];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"semicolonOpt":5,"EOF":6,"unionClause":7,";":8,"unionClauseNotParenthesized":9,"unionClauseParenthesized":10,"order_by_opt":11,"limit_opt":12,"selectClauseParenthesized":13,"UNION":14,"distinctOpt":15,"(":16,")":17,"SELECT":18,"highPriorityOpt":19,"maxStateMentTimeOpt":20,"straightJoinOpt":21,"sqlSmallResultOpt":22,"sqlBigResultOpt":23,"sqlBufferResultOpt":24,"sqlCacheOpt":25,"sqlCalcFoundRowsOpt":26,"selectExprList":27,"selectDataSetOpt":28,"ALL":29,"DISTINCT":30,"DISTINCTROW":31,"HIGH_PRIORITY":32,"MAX_STATEMENT_TIME":33,"=":34,"NUMERIC":35,"STRAIGHT_JOIN":36,"SQL_SMALL_RESULT":37,"SQL_BIG_RESULT":38,"SQL_BUFFER_RESULT":39,"SQL_CACHE":40,"SQL_NO_CACHE":41,"SQL_CALC_FOUND_ROWS":42,",":43,"selectExpr":44,"*":45,"SELECT_EXPR_STAR":46,"expr":47,"selectExprAliasOpt":48,"AS":49,"IDENTIFIER":50,"STRING":51,"string":52,"number":53,"EXPONENT_NUMERIC":54,"HEX_NUMERIC":55,"boolean":56,"TRUE":57,"FALSE":58,"null":59,"NULL":60,"literal":61,"place_holder":62,"function_call":63,"function_call_param_list":64,"function_call_param":65,"identifier":66,"DOT":67,"identifier_list":68,"case_expr_opt":69,"when_then_list":70,"WHEN":71,"THEN":72,"case_when_else":73,"ELSE":74,"case_when":75,"CASE":76,"END":77,"simple_expr_prefix":78,"+":79,"simple_expr":80,"-":81,"~":82,"!":83,"BINARY":84,"expr_list":85,"ROW":86,"EXISTS":87,"{":88,"}":89,"||":90,"WILDCARD":91,"bit_expr":92,"<<":93,">>":94,"/":95,"DIV":96,"MOD":97,"%":98,"^":99,"not_opt":100,"NOT":101,"escape_opt":102,"ESCAPE":103,"predicate":104,"IN":105,"BETWEEN":106,"AND":107,"SOUNDS":108,"LIKE":109,"REGEXP":110,"comparison_operator":111,">=":112,">":113,"<=":114,"<":115,"<>":116,"!=":117,"sub_query_data_set_opt":118,"ANY":119,"boolean_primary":120,"IS":121,"boolean_extra":122,"UNKNOWN":123,"OR":124,"XOR":125,"where_opt":126,"WHERE":127,"group_by_opt":128,"group_by":129,"roll_up_opt":130,"WITH":131,"ROLLUP":132,"GROUP_BY":133,"group_by_order_by_item_list":134,"order_by":135,"ORDER_BY":136,"group_by_order_by_item":137,"sort_opt":138,"ASC":139,"DESC":140,"having_opt":141,"HAVING":142,"limit":143,"LIMIT":144,"OFFSET":145,"procedure_opt":146,"procedure":147,"PROCEDURE":148,"for_update_lock_in_share_mode_opt":149,"FOR":150,"UPDATE":151,"LOCK":152,"SHARE":153,"MODE":154,"FROM":155,"table_references":156,"partitionOpt":157,"escaped_table_reference":158,"table_reference":159,"OJ":160,"join_inner_cross":161,"INNER":162,"CROSS":163,"left_right":164,"LEFT":165,"RIGHT":166,"out_opt":167,"OUTER":168,"left_right_out_opt":169,"join_table":170,"JOIN":171,"table_factor":172,"join_condition":173,"on_join_condition":174,"NATURAL":175,"join_condition_opt":176,"ON":177,"USING":178,"partition_names":179,"PARTITION":180,"aliasOpt":181,"index_or_key":182,"INDEX":183,"KEY":184,"for_opt":185,"identifier_list_opt":186,"index_hint_list_opt":187,"index_hint_list":188,"index_hint":189,"USE":190,"IGNORE":191,"FORCE":192,"PLACE_HOLDER":193,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",8:";",14:"UNION",16:"(",17:")",18:"SELECT",29:"ALL",30:"DISTINCT",31:"DISTINCTROW",32:"HIGH_PRIORITY",33:"MAX_STATEMENT_TIME",34:"=",35:"NUMERIC",36:"STRAIGHT_JOIN",37:"SQL_SMALL_RESULT",38:"SQL_BIG_RESULT",39:"SQL_BUFFER_RESULT",40:"SQL_CACHE",41:"SQL_NO_CACHE",42:"SQL_CALC_FOUND_ROWS",43:",",45:"*",46:"SELECT_EXPR_STAR",49:"AS",50:"IDENTIFIER",51:"STRING",54:"EXPONENT_NUMERIC",55:"HEX_NUMERIC",57:"TRUE",58:"FALSE",60:"NULL",67:"DOT",71:"WHEN",72:"THEN",74:"ELSE",76:"CASE",77:"END",79:"+",81:"-",82:"~",83:"!",84:"BINARY",86:"ROW",87:"EXISTS",88:"{",89:"}",90:"||",91:"WILDCARD",93:"<<",94:">>",95:"/",96:"DIV",97:"MOD",98:"%",99:"^",101:"NOT",103:"ESCAPE",105:"IN",106:"BETWEEN",107:"AND",108:"SOUNDS",109:"LIKE",110:"REGEXP",112:">=",113:">",114:"<=",115:"<",116:"<>",117:"!=",119:"ANY",121:"IS",123:"UNKNOWN",124:"OR",125:"XOR",127:"WHERE",131:"WITH",132:"ROLLUP",133:"GROUP_BY",136:"ORDER_BY",139:"ASC",140:"DESC",142:"HAVING",144:"LIMIT",145:"OFFSET",148:"PROCEDURE",150:"FOR",151:"UPDATE",152:"LOCK",153:"SHARE",154:"MODE",155:"FROM",160:"OJ",162:"INNER",163:"CROSS",165:"LEFT",166:"RIGHT",168:"OUTER",171:"JOIN",175:"NATURAL",177:"ON",178:"USING",180:"PARTITION",183:"INDEX",184:"KEY",190:"USE",191:"IGNORE",192:"FORCE",193:"PLACE_HOLDER"},
productions_: [0,[3,3],[3,3],[5,1],[5,0],[7,1],[7,3],[10,4],[10,4],[13,3],[9,4],[9,4],[4,12],[15,1],[15,1],[15,1],[15,0],[19,1],[19,0],[20,3],[20,0],[21,1],[21,0],[22,1],[22,0],[23,1],[23,0],[24,1],[24,0],[25,0],[25,1],[25,1],[26,1],[26,0],[27,3],[27,1],[44,1],[44,1],[44,2],[48,0],[48,2],[48,1],[48,2],[48,1],[52,1],[53,1],[53,1],[53,1],[56,1],[56,1],[59,1],[61,1],[61,1],[61,1],[61,1],[61,1],[63,4],[64,3],[64,1],[65,0],[65,1],[65,1],[65,2],[65,1],[66,1],[66,3],[68,1],[68,3],[69,0],[69,1],[70,4],[70,5],[73,0],[73,2],[75,5],[78,2],[78,2],[78,2],[78,2],[78,2],[80,1],[80,1],[80,1],[80,1],[80,3],[80,4],[80,3],[80,4],[80,4],[80,1],[80,3],[80,3],[80,5],[92,1],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[92,3],[100,0],[100,1],[102,0],[102,2],[104,1],[104,6],[104,6],[104,6],[104,4],[104,5],[104,4],[111,1],[111,1],[111,1],[111,1],[111,1],[111,1],[111,1],[118,1],[118,1],[120,1],[120,4],[120,3],[120,6],[122,1],[122,1],[47,1],[47,4],[47,2],[47,3],[47,3],[47,3],[85,1],[85,3],[126,0],[126,2],[128,0],[128,1],[130,0],[130,2],[129,3],[11,0],[11,1],[135,3],[134,1],[134,3],[137,2],[138,0],[138,1],[138,1],[141,0],[141,2],[143,2],[143,4],[143,4],[12,0],[12,1],[146,0],[146,1],[147,2],[149,0],[149,2],[149,4],[28,0],[28,10],[156,1],[156,3],[158,1],[158,4],[161,0],[161,1],[161,1],[164,1],[164,1],[167,0],[167,1],[169,0],[169,2],[170,4],[170,5],[170,4],[170,6],[170,5],[176,0],[176,1],[174,2],[173,1],[173,4],[159,1],[159,1],[179,1],[179,3],[157,0],[157,4],[181,0],[181,2],[181,1],[182,1],[182,1],[185,0],[185,2],[185,2],[185,2],[186,0],[186,1],[187,0],[187,1],[188,1],[188,3],[189,6],[189,6],[189,6],[172,4],[172,4],[172,3],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 2:
 return {nodeType: 'Main', value: $$[$0-2], hasSemicolon: $$[$0-1]}; 
break;
case 3: case 143:
 this.$ = true 
break;
case 4:
 this.$ = false 
break;
case 5: case 13: case 14: case 15: case 17: case 19: case 21: case 23: case 25: case 27: case 30: case 31: case 32: case 51: case 52: case 53: case 54: case 55: case 60: case 61: case 63: case 69: case 73: case 80: case 81: case 82: case 83: case 89: case 93: case 105: case 107: case 108: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 128: case 130: case 139: case 141: case 146: case 152: case 153: case 155: case 160: case 162: case 163: case 174: case 175: case 176: case 177: case 179: case 188: case 190: case 192: case 193: case 201: case 202: case 208: case 210:
 this.$ = $$[$0] 
break;
case 6:
 this.$ = $$[$0-2], this.$.orderBy = $$[$0-1], this.$.limit = $$[$0]; 
break;
case 7: case 8:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] }; 
break;
case 9:
 this.$ = { type: 'SelectParenthesized', value: $$[$0-1] }; 
break;
case 10: case 11:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 12:

        this.$ = {
          type: 'Select',
          distinctOpt: $$[$0-10],
          highPriorityOpt: $$[$0-9],
          maxStateMentTimeOpt: $$[$0-8],
          straightJoinOpt: $$[$0-7],
          sqlSmallResultOpt: $$[$0-6],
          sqlBigResultOpt: $$[$0-5],
          sqlBufferResultOpt: $$[$0-4],
          sqlCacheOpt: $$[$0-3],
          sqlCalcFoundRowsOpt: $$[$0-2],
          selectItems: $$[$0-1],
          from: $$[$0].from,
          partition: $$[$0].partition,
          where: $$[$0].where,
          groupBy: $$[$0].groupBy,
          having: $$[$0].having,
          orderBy: $$[$0].orderBy,
          limit: $$[$0].limit,
          procedure: $$[$0].procedure,
          updateLockMode: $$[$0].updateLockMode
        }
      
break;
case 16: case 18: case 20: case 22: case 24: case 26: case 28: case 29: case 33: case 59: case 68: case 72: case 104: case 106: case 138: case 140: case 142: case 145: case 151: case 154: case 159: case 161: case 164: case 173: case 178: case 187: case 196: case 203: case 207: case 209:
 this.$ = null 
break;
case 34:
 $$[$0-2].value.push($$[$0]); 
break;
case 35:
 this.$ = { type: 'SelectExpr', value: [ $$[$0] ] } 
break;
case 36: case 37: case 64:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 38:
 this.$ = $$[$0-1]; this.$.alias = $$[$0].alias; this.$.hasAs = $$[$0].hasAs; 
break;
case 39: case 198:
 this.$ = {alias: null, hasAs: null} 
break;
case 40: case 42:
 this.$ = {alias: $$[$0], hasAs: true} 
break;
case 41:
 this.$ = {alias: $$[$0], hasAs: false} 
break;
case 43:
 this.$ = {alias: $$[$01], hasAs: false} 
break;
case 44:
 this.$ = { type: 'String', value: $$[$0] } 
break;
case 45: case 46: case 47:
 this.$ = { type: 'Number', value: $$[$0] } 
break;
case 48:
 this.$ = { type: 'Boolean', value: 'TRUE' } 
break;
case 49:
 this.$ = { type: 'Boolean', value: 'FALSE' } 
break;
case 50:
 this.$ = { type: 'Null', value: 'null' } 
break;
case 56:
 this.$ = {type: 'FunctionCall', name: $$[$0-3], params: $$[$0-1]} 
break;
case 57:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 58:
 this.$ = [$$[$0]]; 
break;
case 62:
 this.$ = { type: 'FunctionCallParam', distinctOpt: $$[$0-1], value: $$[$0] } 
break;
case 65:
 this.$ = $$[$0-2]; $$[$0-2].value += '.' + $$[$0] 
break;
case 66:
 this.$ = { type: 'IdentifierList', value: [ $$[$0] ] } 
break;
case 67: case 170:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 70:
 this.$ = { type: 'WhenThenList', value: [ { when: $$[$0-2], then: $$[$0] } ] }; 
break;
case 71:
 this.$ = $$[$0-4]; this.$.value.push({ when: $$[$0-2], then: $$[$0] }); 
break;
case 74:
 this.$ = { type: 'CaseWhen', caseExprOpt: $$[$0-3], whenThenList: $$[$0-2], else: $$[$0-1] } 
break;
case 75: case 76: case 77: case 78: case 79:
 this.$ = { type: 'Prefix', prefix: $$[$0-1], value: $$[$0] } 
break;
case 84:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-1] } 
break;
case 85:
 this.$ = { type: 'SimpleExprParentheses', value: $$[$0-2], hasRow: true } 
break;
case 86:
 this.$ = { type: 'SubQuery', value: $$[$0-1] } 
break;
case 87:
 this.$ = { type: 'SubQuery', value: $$[$0-1], hasExists: true } 
break;
case 88:
 this.$ = { type: 'IdentifierExpr', identifier: $$[$0-2], value: $$[$0-1] } 
break;
case 90:
 this.$ = { type: 'StartsWithExpr', value: $$[$0-2] } 
break;
case 91:
 this.$ = { type: 'EndsWithExpr', value: $$[$0] } 
break;
case 92:
 this.$ = { type: 'ContainsExpr', value: $$[$0-2] } 
break;
case 94:
 this.$ = { type: 'BitExpression', operator: '<<', left: $$[$0-2], right: $$[$0] } 
break;
case 95:
 this.$ = { type: 'BitExpression', operator: '>>', left: $$[$0-2], right: $$[$0] } 
break;
case 96:
 this.$ = { type: 'BitExpression', operator: '+', left: $$[$0-2], right: $$[$0] } 
break;
case 97:
 this.$ = { type: 'BitExpression', operator: '-', left: $$[$0-2], right: $$[$0] } 
break;
case 98:
 this.$ = { type: 'BitExpression', operator: '*', left: $$[$0-2], right: $$[$0] } 
break;
case 99:
 this.$ = { type: 'BitExpression', operator: '/', left: $$[$0-2], right: $$[$0] } 
break;
case 100:
 this.$ = { type: 'BitExpression', operator: 'DIV', left: $$[$0-2], right: $$[$0] } 
break;
case 101:
 this.$ = { type: 'BitExpression', operator: 'MOD', left: $$[$0-2], right: $$[$0] } 
break;
case 102:
 this.$ = { type: 'BitExpression', operator: '%', left: $$[$0-2], right: $$[$0] } 
break;
case 103:
 this.$ = { type: 'BitExpression', operator: '^', left: $$[$0-2], right: $$[$0] } 
break;
case 109:
 this.$ = { type: 'InSubQueryPredicate', hasNot: $$[$0-4], left: $$[$0-5] ,right: $$[$0-1] } 
break;
case 110:
 this.$ = { type: 'InExpressionListPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: $$[$0-1] } 
break;
case 111:
 this.$ = { type: 'BetweenPredicate', hasNot: $$[$0-4], left: $$[$0-5], right: { left: $$[$0-2], right: $$[$0] } } 
break;
case 112:
 this.$ = { type: 'SoundsLikePredicate', hasNot: false, left: $$[$0-3], right: $$[$0] } 
break;
case 113:
 this.$ = { type: 'LikePredicate', hasNot: $$[$0-3], left: $$[$0-4], right: $$[$0-1], escape: $$[$0] } 
break;
case 114:
 this.$ = { type: 'RegexpPredicate', hasNot: $$[$0-2], left: $$[$0-3], right: $$[$0] } 
break;
case 125:
 this.$ = { type: 'IsNullBooleanPrimary', hasNot: $$[$0-1] , value: $$[$0-3] } 
break;
case 126:
 this.$ = { type: 'ComparisonBooleanPrimary', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 127:
 this.$ = { type: 'ComparisonSubQueryBooleanPrimary', operator: $$[$0-4], subQueryOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1] } 
break;
case 129:
 this.$ = { type: 'BooleanExtra', value: $$[$0] } 
break;
case 131:
 this.$ = { type: 'IsExpression', hasNot: $$[$0-1], left: $$[$0-3], right: $$[$0] } 
break;
case 132:
 this.$ = { type: 'NotExpression', value: $$[$0] } 
break;
case 133:
 this.$ = { type: 'OrExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 134:
 this.$ = { type: 'AndExpression', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 135:
 this.$ = { type: 'XORExpression', left: $$[$0-2], right: $$[$0] } 
break;
case 136:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 137: case 212:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 144:
 this.$ = { type: 'GroupBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 147:
 this.$ = { type: 'OrderBy', value: $$[$0-1], rollUp: $$[$0] } 
break;
case 148: case 194:
 this.$ = [ $$[$0] ] 
break;
case 149:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 150:
 this.$ = { type: 'GroupByOrderByItem', value: $$[$0-1], sortOpt: $$[$0] } 
break;
case 156:
 this.$ = { type: 'Limit', value: [ $$[$0] ] } 
break;
case 157:
 this.$ = { type: 'Limit', value: [ $$[$0-2], $$[$0] ] } 
break;
case 158:
 this.$ = { type: 'Limit', value: [ $$[$0], $$[$0-2] ], offsetMode: true } 
break;
case 165:
 this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 166:
 this.$ = $$[$0-3] + ' ' + $$[$0-2] + ' ' + $$[$0-1] + ' ' + $$[$0] 
break;
case 167:
 this.$ = {} 
break;
case 168:
 this.$ = { from: $$[$0-8], partition: $$[$0-7], where: $$[$0-6], groupBy: $$[$0-5], having: $$[$0-4], orderBy: $$[$0-3], limit: $$[$0-2], procedure: $$[$0-1], updateLockMode: $$[$0] } 
break;
case 169:
 this.$ = { type: 'TableReferences', value: [ $$[$0] ] } 
break;
case 171:
 this.$ = { type: 'TableReference', value: $$[$0] } 
break;
case 172:
 this.$ = { type: 'TableReference', hasOj: true, value: $$[$0-1] } 
break;
case 180:
 this.$ = { leftRight: null, outOpt: null } 
break;
case 181:
 this.$ = { leftRight: $$[$0-1], outOpt: $$[$0] } 
break;
case 182:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-2], left: $$[$0-3], right: $$[$0], condition: null } 
break;
case 183:
 this.$ = { type: 'InnerCrossJoinTable', innerCrossOpt: $$[$0-3], left: $$[$0-4], right: $$[$0-1], condition: $$[$0] } 
break;
case 184:
 this.$ = { type: 'StraightJoinTable', left: $$[$0-3], right: $$[$0-1], condition: $$[$0] } 
break;
case 185:
 this.$ = { type: 'LeftRightJoinTable', leftRight: $$[$0-4], outOpt: $$[$0-3], left: $$[$0-5], right: $$[$0-1], condition: $$[$0] } 
break;
case 186:
 this.$ = { type: 'NaturalJoinTable', leftRight: $$[$0-2].leftRight, outOpt: $$[$0-2].outOpt, left: $$[$0-4], right: $$[$0] } 
break;
case 189:
 this.$ = { type: 'OnJoinCondition', value: $$[$0] } 
break;
case 191:
 this.$ = { type: 'UsingJoinCondition', value: $$[$0-1] } 
break;
case 195:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]) 
break;
case 197:
 this.$ = { type: 'Partitions', value: $$[$0-1] } 
break;
case 199:
 this.$ = { hasAs: true, alias: $$[$0] } 
break;
case 200:
 this.$ = { hasAs: false, alias: $$[$0] } 
break;
case 204: case 205: case 206:
 this.$ = { type: 'ForOptIndexHint', value: $$[$0] } 
break;
case 211:
 this.$ = { type: 'IndexHintList', value: [ $$[$0] ] } 
break;
case 213:
 this.$ = { type: 'UseIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 214:
 this.$ = { type: 'IgnoreIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 215:
 this.$ = { type: 'ForceIndexHint', value: $$[$0-1], forOpt: $$[$0-3], indexOrKey: $$[$0-4] } 
break;
case 216:
 this.$ = { type: 'TableFactor', value: $$[$0-3], partition: $$[$0-2], alias: $$[$0-1].alias, hasAs: $$[$0-1].hasAs, indexHintOpt: $$[$0] } 
break;
case 217:
 this.$ = { type: 'TableFactor', value: { type: 'SubQuery', value: $$[$0-2] }, alias: $$[$0].alias, hasAs: $$[$0].hasAs} 
break;
case 218:
 this.$ = $$[$0-1]; this.$.hasParentheses = true 
break;
case 219:
 this.$ = { type: 'PlaceHolder', value: $$[$0], param: $$[$0].slice(2, -1)} 
break;
}
},
table: [{3:1,4:2,7:3,9:5,10:6,13:7,16:$V0,18:$V1},{1:[3]},{5:9,6:$V2,8:$V3,14:$V4},{5:12,6:$V2,8:$V3},o([16,32,33,35,36,37,38,39,40,41,42,45,46,50,51,54,55,57,58,60,76,79,81,82,83,84,86,87,88,91,101,193],$V5,{15:13,29:$V6,30:$V7,31:$V8}),o($V9,[2,5]),o([6,8,144],$Va,{11:17,135:18,136:$Vb}),{14:$Vc},{4:21,18:$V1},{6:[1,22]},{15:23,18:$V5,29:$V6,30:$V7,31:$V8},{6:[2,3]},{6:[1,24]},o($Vd,[2,18],{19:25,32:[1,26]}),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($V9,$Vf,{12:27,143:28,144:$Vg}),o($Vh,[2,146]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,134:30,137:31,193:$VC},{15:68,16:$V5,29:$V6,30:$V7,31:$V8},{17:[1,69]},{1:[2,1]},{4:70,9:71,18:$V1},{1:[2,2]},o($VD,[2,20],{20:72,33:[1,73]}),o($Vd,[2,17]),o($V9,[2,6]),o($VE,[2,160]),{35:[1,74]},o($Vh,$VF,{130:75,43:$VG,131:$VH}),o($VI,[2,148]),o($VI,[2,151],{138:78,107:$VJ,124:$VK,125:$VL,139:[1,82],140:[1,83]}),o($VM,[2,130],{111:85,34:[1,86],112:[1,87],113:[1,88],114:[1,89],115:[1,90],116:[1,91],117:[1,92],121:[1,84]}),{16:$Vi,35:$Vj,47:93,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($VN,[2,124]),o($VN,[2,108],{100:94,45:$VO,79:$VP,81:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX,101:$VY,105:$VZ,106:$VZ,109:$VZ,110:$VZ,108:[1,95]}),o($V_,[2,93]),o($V$,[2,80]),o($V$,[2,81],{67:$V01,90:[1,107]}),o($V$,[2,82]),o($V$,[2,83]),{4:110,16:$Vi,18:$V1,35:$Vj,47:111,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:109,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{16:[1,112]},{16:[1,113]},{50:$V11,66:114},o($V$,[2,89]),{90:[1,116]},o($V$,[2,51]),o($V$,[2,52]),o($V$,[2,53]),o($V$,[2,54]),o($V$,[2,55]),o([6,8,14,17,34,36,43,45,49,50,51,67,71,72,74,77,79,81,89,90,93,94,95,96,97,98,99,101,103,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],$V21,{16:$V31}),{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:118,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:119,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:120,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:121,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:122,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},{16:$Vi,35:$Vj,47:124,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,69:123,71:[2,68],75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($V$,[2,44]),o($V$,[2,45]),o($V$,[2,46]),o($V$,[2,47]),o($V$,[2,48]),o($V$,[2,49]),o($V$,[2,50]),o($V$,[2,219]),{10:126,13:125,16:$V0},o([6,8,14,136,144],[2,9]),o($V9,[2,10],{14:$V4}),o($V9,[2,11]),o($V41,[2,22],{21:127,36:[1,128]}),{34:[1,129]},o($VE,[2,156],{43:[1,130],145:[1,131]}),o($Vh,[2,147]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,137:132,193:$VC},{132:[1,133]},o($VI,[2,150]),{16:$Vi,35:$Vj,47:134,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{16:$Vi,35:$Vj,47:135,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{16:$Vi,35:$Vj,47:136,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($VI,[2,152]),o($VI,[2,153]),o([57,58,60,123],$VZ,{100:137,101:$VY}),{16:$Vi,29:[1,140],35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,104:138,118:139,119:[1,141],193:$VC},o($V51,[2,115]),o($V51,[2,116]),o($V51,[2,117]),o($V51,[2,118]),o($V51,[2,119]),o($V51,[2,120]),o($V51,[2,121]),o($VM,[2,132]),{105:[1,142],106:[1,143],109:[1,144],110:[1,145]},{109:[1,146]},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:147,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:148,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:149,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:150,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:151,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:152,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:153,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:154,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:155,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:156,193:$VC},o([57,58,60,105,106,109,110,123],[2,105]),{91:[1,157]},{50:[1,158]},{17:[1,159],43:$V61},{17:[1,161]},o($V71,[2,136],{107:$VJ,124:$VK,125:$VL}),{16:$Vi,35:$Vj,47:111,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:162,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{4:163,18:$V1},{16:$Vi,35:$Vj,47:164,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,67:$V01,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($V81,$V21),{50:$V11,66:165},o($V71,$V91,{120:33,104:35,92:36,80:37,61:38,66:39,63:40,78:41,75:46,52:48,53:49,56:50,59:51,62:52,64:166,65:167,47:171,16:$Vi,30:$Va1,35:$Vj,45:$Vb1,46:$Vc1,50:$Vk,51:$Vl,54:$Vm,55:$Vn,57:$Vo,58:$Vp,60:$Vq,76:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,101:$VB,193:$VC}),o($V$,[2,75]),o($V$,[2,76]),o($V$,[2,77]),o($V$,[2,78]),o($V$,[2,79]),{70:172,71:[1,173]},{71:[2,69],107:$VJ,124:$VK,125:$VL},o($Vd1,[2,7],{14:$Vc}),o($Vd1,[2,8]),o($Ve1,[2,24],{22:174,37:[1,175]}),o($V41,[2,21]),{35:[1,176]},{35:[1,177]},{35:[1,178]},o($VI,[2,149]),o($Vf1,[2,143]),o($Vg1,[2,133],{107:$VJ}),o($VM,[2,134]),o($Vg1,[2,135],{107:$VJ}),{56:181,57:$Vo,58:$Vp,60:[1,180],122:179,123:[1,182]},o($VN,[2,126]),{16:[1,183]},{16:[2,122]},{16:[2,123]},{16:[1,184]},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:185,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:186,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:187,193:$VC},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:188,193:$VC},o($Vh1,[2,94],{45:$VO,79:$VP,81:$VQ,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vh1,[2,95],{45:$VO,79:$VP,81:$VQ,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vi1,[2,96],{45:$VO,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vi1,[2,97],{45:$VO,95:$VT,96:$VU,97:$VV,98:$VW}),o($V_,[2,98]),o($V_,[2,99]),o($V_,[2,100]),o($V_,[2,101]),o($V_,[2,102]),o([6,8,14,17,34,36,43,49,50,51,71,72,74,77,89,99,101,105,106,107,108,109,110,112,113,114,115,116,117,121,124,125,127,131,133,136,139,140,142,144,148,150,152,155,162,163,165,166,171,175,177,178,180],[2,103],{45:$VO,79:$VP,81:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V$,[2,90]),o($V81,[2,65]),o($V$,[2,84]),{16:$Vi,35:$Vj,47:189,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($V$,[2,86]),{17:[1,190],43:$V61},{17:[1,191]},{89:[1,192],107:$VJ,124:$VK,125:$VL},o($V$,[2,91],{67:$V01,90:[1,193]}),{17:[1,194],43:[1,195]},o($V71,[2,58]),o($V71,[2,60]),o($V71,[2,61]),{16:$Vi,35:$Vj,47:196,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($V71,[2,63],{107:$VJ,124:$VK,125:$VL}),{71:[1,198],73:197,74:[1,199],77:[2,72]},{16:$Vi,35:$Vj,47:200,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($Vj1,[2,26],{23:201,38:[1,202]}),o($Ve1,[2,23]),o($VD,[2,19]),o($VE,[2,157]),o($VE,[2,158]),o($VM,[2,131]),o($VN,[2,125]),o($VM,[2,128]),o($VM,[2,129]),{4:203,18:$V1},{4:204,16:$Vi,18:$V1,35:$Vj,47:111,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,85:205,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{45:$VO,79:$VP,81:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX,107:[1,206]},o($VN,[2,106],{102:207,103:[1,208]}),o($VN,[2,114],{45:$VO,79:$VP,81:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX}),o($VN,[2,112],{45:$VO,79:$VP,81:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW,99:$VX}),o($V71,[2,137],{107:$VJ,124:$VK,125:$VL}),o($V$,[2,85]),o($V$,[2,87]),o($V$,[2,88]),{91:[1,209]},o($V$,[2,56]),o($V71,$V91,{120:33,104:35,92:36,80:37,61:38,66:39,63:40,78:41,75:46,52:48,53:49,56:50,59:51,62:52,47:171,65:210,16:$Vi,30:$Va1,35:$Vj,45:$Vb1,46:$Vc1,50:$Vk,51:$Vl,54:$Vm,55:$Vn,57:$Vo,58:$Vp,60:$Vq,76:$Vr,79:$Vs,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,101:$VB,193:$VC}),o($V71,[2,62],{107:$VJ,124:$VK,125:$VL}),{77:[1,211]},{16:$Vi,35:$Vj,47:212,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{16:$Vi,35:$Vj,47:213,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{72:[1,214],107:$VJ,124:$VK,125:$VL},o($Vk1,[2,28],{24:215,39:[1,216]}),o($Vj1,[2,25]),{17:[1,217]},{17:[1,218]},{17:[1,219],43:$V61},{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,104:220,193:$VC},o($VN,[2,113]),{16:$Vi,35:$Vj,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:221,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,193:$VC},o($V$,[2,92]),o($V71,[2,57]),o($V$,[2,74]),{72:[1,222],107:$VJ,124:$VK,125:$VL},{77:[2,73],107:$VJ,124:$VK,125:$VL},{16:$Vi,35:$Vj,47:223,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($Vl1,[2,29],{25:224,40:[1,225],41:[1,226]}),o($Vk1,[2,27]),o($VN,[2,127]),o($VN,[2,109]),o($VN,[2,110]),o($VN,[2,111]),o($VN,[2,107]),{16:$Vi,35:$Vj,47:227,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($Vm1,[2,70],{107:$VJ,124:$VK,125:$VL}),o($Vn1,[2,33],{26:228,42:[1,229]}),o($Vl1,[2,30]),o($Vl1,[2,31]),o($Vm1,[2,71],{107:$VJ,124:$VK,125:$VL}),{16:$Vi,27:230,35:$Vj,44:231,45:$Vo1,46:$Vp1,47:234,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($Vn1,[2,32]),o($Vq1,[2,167],{28:235,43:[1,236],155:[1,237]}),o($Vr1,[2,35]),o($Vr1,[2,36]),o($Vr1,[2,37]),o($Vr1,[2,39],{48:238,49:[1,239],50:[1,240],51:[1,241],107:$VJ,124:$VK,125:$VL}),o($Vq1,[2,12]),{16:$Vi,35:$Vj,44:242,45:$Vo1,46:$Vp1,47:234,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{16:$Vs1,50:$V11,66:249,88:$Vt1,156:243,158:244,159:245,170:248,172:247},o($Vr1,[2,38]),{50:[1,251],51:[1,252]},o($Vr1,[2,41]),o($Vr1,[2,43]),o($Vr1,[2,34]),o([6,8,14,17,127,133,136,142,144,148,150,152],$Vu1,{157:253,43:$Vv1,180:$Vw1}),o($Vx1,[2,169]),o($Vx1,[2,171],{161:256,164:258,36:$Vy1,162:$Vz1,163:$VA1,165:$VB1,166:$VC1,171:$VD1,175:$VE1}),{160:[1,264]},o($VF1,[2,192]),o($VF1,[2,193]),o([6,8,14,17,36,43,49,50,89,127,133,136,142,144,148,150,152,162,163,165,166,171,175,177,178,190,191,192],$Vu1,{157:265,67:$V01,180:$Vw1}),{4:266,16:$Vs1,18:$V1,50:$V11,66:249,88:$Vt1,156:267,158:244,159:245,170:248,172:247},o($Vr1,[2,40]),o($Vr1,[2,42]),o($VG1,[2,138],{126:268,127:[1,269]}),{16:$Vs1,50:$V11,66:249,88:$Vt1,158:270,159:245,170:248,172:247},{16:[1,271]},{171:[1,272]},{16:$Vs1,50:$V11,66:249,172:273},{167:274,168:$VH1,171:$VI1},{164:277,165:$VB1,166:$VC1,169:276,171:[2,180]},{171:[2,174]},{171:[2,175]},o($VJ1,[2,176]),o($VJ1,[2,177]),{16:$Vs1,50:$V11,66:249,159:278,170:248,172:247},o($VK1,$VL1,{181:279,66:281,49:$VM1,50:$V11}),{17:[1,282]},{17:[1,283],43:$Vv1},o($Vf1,[2,140],{128:284,129:285,133:[1,286]}),{16:$Vi,35:$Vj,47:287,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($Vx1,[2,170]),{50:$V11,66:289,179:288},{16:$Vs1,50:$V11,66:249,172:290},{174:291,177:$VN1},{171:[1,293]},{171:[2,179]},{171:[1,294]},{167:295,168:$VH1,171:$VI1},{36:$Vy1,89:[1,296],161:256,162:$Vz1,163:$VA1,164:258,165:$VB1,166:$VC1,171:$VD1,175:$VE1},o($VF1,[2,209],{187:297,188:298,189:299,190:$VO1,191:$VP1,192:$VQ1}),{50:$V11,66:303},o($VK1,[2,200],{67:$V01}),o($VF1,$VL1,{66:281,181:304,49:$VM1,50:$V11}),o($VF1,[2,218]),o($VR1,[2,154],{141:305,142:[1,306]}),o($Vf1,[2,141]),{16:$Vi,35:$Vj,47:32,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,134:307,137:31,193:$VC},o($VG1,[2,139],{107:$VJ,124:$VK,125:$VL}),{17:[1,308],43:[1,309]},o($V71,[2,194],{67:$V01}),o([6,8,14,17,36,43,89,127,133,136,142,144,148,150,152,162,163,165,166,171,175,180],[2,182],{173:310,174:311,177:$VN1,178:$VS1}),o($VF1,[2,184]),{16:$Vi,35:$Vj,47:313,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},{16:$Vs1,50:$V11,66:249,159:314,170:248,172:247},{16:$Vs1,50:$V11,66:249,172:315},{171:[2,181]},o($Vx1,[2,172]),o($VF1,[2,216]),o($VF1,[2,210]),o($VF1,[2,211]),{182:317,183:$VT1,184:$VU1},{182:320,183:$VT1,184:$VU1},{182:321,183:$VT1,184:$VU1},o($VK1,[2,199],{67:$V01}),o($VF1,[2,217]),o($Vh,$Va,{135:18,11:322,136:$Vb}),{16:$Vi,35:$Vj,47:323,50:$Vk,51:$Vl,52:48,53:49,54:$Vm,55:$Vn,56:50,57:$Vo,58:$Vp,59:51,60:$Vq,61:38,62:52,63:40,66:39,75:46,76:$Vr,78:41,79:$Vs,80:37,81:$Vt,82:$Vu,83:$Vv,84:$Vw,86:$Vx,87:$Vy,88:$Vz,91:$VA,92:36,101:$VB,104:35,120:33,193:$VC},o($Vf1,$VF,{130:324,43:$VG,131:$VH}),o([6,8,14,17,36,43,49,50,89,127,133,136,142,144,148,150,152,162,163,165,166,171,175,177,178,180,190,191,192],[2,197]),{50:$V11,66:325},o($VF1,[2,183]),o($VF1,[2,190]),{16:[1,326]},o($VF1,[2,189],{107:$VJ,124:$VK,125:$VL}),{36:$Vy1,161:256,162:$Vz1,163:$VA1,164:258,165:$VB1,166:$VC1,171:$VD1,173:327,174:311,175:$VE1,177:$VN1,178:$VS1},o($VF1,[2,186]),{189:328,190:$VO1,191:$VP1,192:$VQ1},{16:$VV1,150:$VW1,185:329},o($VX1,[2,201]),o($VX1,[2,202]),{16:$VV1,150:$VW1,185:331},{16:$VV1,150:$VW1,185:332},o($VE,$Vf,{143:28,12:333,144:$Vg}),o($VR1,[2,155],{107:$VJ,124:$VK,125:$VL}),o($Vf1,[2,144]),o($V71,[2,195],{67:$V01}),{50:$V11,66:335,68:334},o($VF1,[2,185]),o($VF1,[2,212]),{16:[1,336]},{133:[1,339],136:[1,338],171:[1,337]},{16:[1,340]},{16:[1,341]},o($VY1,[2,161],{146:342,147:343,148:[1,344]}),{17:[1,345],43:$VZ1},o($V71,[2,66],{67:$V01}),{17:[2,207],50:$V11,66:335,68:348,186:347},{16:[2,204]},{16:[2,205]},{16:[2,206]},{50:$V11,66:335,68:349},{50:$V11,66:335,68:350},o($Vq1,[2,164],{149:351,150:[1,352],152:[1,353]}),o($VY1,[2,162]),{50:[1,355],63:354},o($VF1,[2,191]),{50:$V11,66:356},{17:[1,357]},{17:[2,208],43:$VZ1},{17:[1,358],43:$VZ1},{17:[1,359],43:$VZ1},o($Vq1,[2,168]),{151:[1,360]},{105:[1,361]},o($VY1,[2,163]),{16:$V31},o($V71,[2,67],{67:$V01}),o($VF1,[2,213]),o($VF1,[2,214]),o($VF1,[2,215]),o($Vq1,[2,165]),{153:[1,362]},{154:[1,363]},o($Vq1,[2,166])],
defaultActions: {11:[2,3],22:[2,1],24:[2,2],140:[2,122],141:[2,123],260:[2,174],261:[2,175],275:[2,179],295:[2,181],337:[2,204],338:[2,205],339:[2,206]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip sql comments */
break;
case 3:/* skip whitespace */
break;
case 4:return 193
break;
case 5:return 50
break;
case 6:return 50
break;
case 7:return 50
break;
case 8:return 18
break;
case 9:return 29
break;
case 10:return 119
break;
case 11:return 30
break;
case 12:return 31
break;
case 13:return 32
break;
case 14:return 33
break;
case 15:return 36
break;
case 16:return 37
break;
case 17:return 38
break;
case 18:return 39
break;
case 19:return 40
break;
case 20:return 41
break;
case 21:return 42
break;
case 22:return 46
break;
case 23:return 49
break;
case 24:return 57
break;
case 25:return 58
break;
case 26:return 60
break;
case 27:return 'COLLATE'
break;
case 28:return 84
break;
case 29:return 86
break;
case 30:return 87
break;
case 31:return 76
break;
case 32:return 71
break;
case 33:return 72
break;
case 34:return 74
break;
case 35:return 77
break;
case 36:return 96
break;
case 37:return 97
break;
case 38:return 101
break;
case 39:return 106
break;
case 40:return 105
break;
case 41:return 108
break;
case 42:return 109
break;
case 43:return 103
break;
case 44:return 110
break;
case 45:return 121
break;
case 46:return 123
break;
case 47:return 107
break;
case 48:return 124
break;
case 49:return 125
break;
case 50:return 155
break;
case 51:return 180
break;
case 52:return 190
break;
case 53:return 183
break;
case 54:return 184
break;
case 55:return 150
break;
case 56:return 171
break;
case 57:return 136
break;
case 58:return 133
break;
case 59:return 191
break;
case 60:return 192
break;
case 61:return 162
break;
case 62:return 163
break;
case 63:return 177
break;
case 64:return 178
break;
case 65:return 165
break;
case 66:return 166
break;
case 67:return 168
break;
case 68:return 175
break;
case 69:return 127
break;
case 70:return 139
break;
case 71:return 140
break;
case 72:return 131
break;
case 73:return 132
break;
case 74:return 142
break;
case 75:return 145
break;
case 76:return 148
break;
case 77:return 151
break;
case 78:return 152
break;
case 79:return 153
break;
case 80:return 154
break;
case 81:return 160
break;
case 82:return 144
break;
case 83:return 14
break;
case 84:return 43
break;
case 85:return 34
break;
case 86:return 16
break;
case 87:return 17
break;
case 88:return 82
break;
case 89:return 117
break;
case 90:return 83
break;
case 91:return 90
break;
case 92:return '&'
break;
case 93:return 79
break;
case 94:return 81
break;
case 95:return 45
break;
case 96:return 95
break;
case 97:return 98
break;
case 98:return 99
break;
case 99:return 94
break;
case 100:return 112
break;
case 101:return 113
break;
case 102:return 93
break;
case 103:return '<=>'
break;
case 104:return 114
break;
case 105:return 116
break;
case 106:return 115
break;
case 107:return 88
break;
case 108:return 89
break;
case 109:return 8
break;
case 110:return 91
break;
case 111:return 51
break;
case 112:return 51
break;
case 113:return 55
break;
case 114:return 35
break;
case 115:return 54
break;
case 116:return 50
break;
case 117:return 67
break;
case 118:return 51
break;
case 119:return 51
break;
case 120:return 50
break;
case 121:return 6
break;
case 122:return 'INVALID'
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[-][-]\s.*\n)/i,/^(?:[#]\s.*\n)/i,/^(?:\s+)/i,/^(?:[$][{](.*?)[}])/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:SELECT\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTINCTROW\b)/i,/^(?:HIGH_PRIORITY\b)/i,/^(?:MAX_STATEMENT_TIME\b)/i,/^(?:STRAIGHT_JOIN\b)/i,/^(?:SQL_SMALL_RESULT\b)/i,/^(?:SQL_BIG_RESULT\b)/i,/^(?:SQL_BUFFER_RESULT\b)/i,/^(?:SQL_CACHE\b)/i,/^(?:SQL_NO_CACHE\b)/i,/^(?:SQL_CALC_FOUND_ROWS\b)/i,/^(?:([a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*\.){1,2}\*)/i,/^(?:AS\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:NULL\b)/i,/^(?:COLLATE\b)/i,/^(?:BINARY\b)/i,/^(?:ROW\b)/i,/^(?:EXISTS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:DIV\b)/i,/^(?:MOD\b)/i,/^(?:NOT\b)/i,/^(?:BETWEEN\b)/i,/^(?:IN\b)/i,/^(?:SOUNDS\b)/i,/^(?:LIKE\b)/i,/^(?:ESCAPE\b)/i,/^(?:REGEXP\b)/i,/^(?:IS\b)/i,/^(?:UNKNOWN\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:XOR\b)/i,/^(?:FROM\b)/i,/^(?:PARTITION\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:KEY\b)/i,/^(?:FOR\b)/i,/^(?:JOIN\b)/i,/^(?:ORDER\s+BY\b)/i,/^(?:GROUP\s+BY\b)/i,/^(?:IGNORE\b)/i,/^(?:FORCE\b)/i,/^(?:INNER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:USING\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:OUTER\b)/i,/^(?:NATURAL\b)/i,/^(?:WHERE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:WITH\b)/i,/^(?:ROLLUP\b)/i,/^(?:HAVING\b)/i,/^(?:OFFSET\b)/i,/^(?:PROCEDURE\b)/i,/^(?:UPDATE\b)/i,/^(?:LOCK\b)/i,/^(?:SHARE\b)/i,/^(?:MODE\b)/i,/^(?:OJ\b)/i,/^(?:LIMIT\b)/i,/^(?:UNION\b)/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:['](%+)['])/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[0][x][0-9a-fA-F]+)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]+(\.[0-9]+)?[eE][-][0-9]+(\.[0-9]+)?)/i,/^(?:[a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*)/i,/^(?:\.)/i,/^(?:["][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*["])/i,/^(?:['][a-zA-Z_\u4e00-\u9fa5][a-zA-Z0-9_\u4e00-\u9fa5]*['])/i,/^(?:([`])(?:(?=(\\?))\2.)*?\1)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


export { sqlParser };