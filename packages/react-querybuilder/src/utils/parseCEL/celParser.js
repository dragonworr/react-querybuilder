/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var celParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,23],$V2=[1,24],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,25],$V7=[1,26],$V8=[2,38],$V9=[1,13],$Va=[1,9],$Vb=[1,10],$Vc=[1,11],$Vd=[1,29],$Ve=[1,28],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[5,35,41,43,47,48,52,54,55,56,61],$Vj=[1,33],$Vk=[1,34],$Vl=[1,35],$Vm=[5,23,24,25,26,27,28,29,35,38,41,42,43,44,47,48,52,54,55,56,61],$Vn=[1,45],$Vo=[7,9,10,12,13,14,16,18,21,38,39,42,44],$Vp=[2,36],$Vq=[1,66],$Vr=[41,43,48],$Vs=[5,35,41,43,47,48,52,61],$Vt=[2,37],$Vu=[47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"expr":4,"EOF":5,"string_literal":6,"STRING_LIT":7,"bytes_literal":8,"b":9,"B":10,"number_literal":11,"INT_LIT":12,"UINT_LIT":13,"FLOAT_LIT":14,"boolean_literal":15,"BOOL_LIT":16,"null_literal":17,"NULL_LIT":18,"literal":19,"ident":20,"IDENT":21,"relop":22,"==":23,">=":24,">":25,"<=":26,"<":27,"!=":28,"in":29,"relation":30,"member":31,"exclamation_list":32,"!":33,"hyphen_list":34,"-":35,"unary":36,"primary":37,".":38,"(":39,"expr_list":40,")":41,"[":42,"]":43,"{":44,"field_inits":45,"trailing_comma":46,"}":47,",":48,"dot_opt":49,"map_inits":50,"addition":51,"+":52,"multiplication":53,"*":54,"/":55,"%":56,"conditional_and":57,"&&":58,"conditional_or":59,"||":60,":":61,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"STRING_LIT",9:"b",10:"B",12:"INT_LIT",13:"UINT_LIT",14:"FLOAT_LIT",16:"BOOL_LIT",18:"NULL_LIT",21:"IDENT",23:"==",24:">=",25:">",26:"<=",27:"<",28:"!=",29:"in",33:"!",35:"-",38:".",39:"(",41:")",42:"[",43:"]",44:"{",47:"}",48:",",52:"+",54:"*",55:"/",56:"%",58:"&&",60:"||",61:":"},
productions_: [0,[3,2],[6,1],[8,2],[8,2],[11,1],[11,1],[11,1],[15,1],[17,1],[19,1],[19,1],[19,1],[19,1],[19,1],[20,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[30,3],[32,1],[32,2],[34,1],[34,2],[36,1],[36,2],[36,2],[31,1],[31,3],[31,6],[31,4],[31,5],[46,0],[46,1],[49,0],[49,1],[37,2],[37,6],[37,3],[37,4],[37,4],[37,1],[51,3],[51,3],[53,3],[53,3],[53,3],[4,1],[4,1],[4,1],[4,1],[57,3],[59,3],[40,1],[40,3],[45,3],[45,5],[50,3],[50,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { nodeType: 'Main', value: $$[$0-1] }; 
break;
case 2:
 this.$ = { type: 'StringLiteral', value: $$[$0] } 
break;
case 3: case 4:
 this.$ = { type: 'BytesLiteral', value: $$[$0] } 
break;
case 5:
 this.$ = { type: 'IntegerLiteral', value: $$[$0] } 
break;
case 6:
 this.$ = { type: 'UnsignedIntegerLiteral', value: $$[$0] } 
break;
case 7:
 this.$ = { type: 'FloatLiteral', value: $$[$0] } 
break;
case 8:
 this.$ = { type: 'BooleanLiteral', value: $$[$0] } 
break;
case 9:
 this.$ = { type: 'NullLiteral', value: 'null' } 
break;
case 10: case 11: case 12: case 13: case 14: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 36: case 37: case 39: case 51: case 52: case 53: case 54:
 this.$ = $$[$0] 
break;
case 15:
 this.$ = { type: 'Identifier', value: $$[$0] } 
break;
case 23:
 this.$ = { type: 'Relation', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 24:
 this.$ = { type: 'ExclamationList', value: [ $$[$0] ] } 
break;
case 25: case 27:
 this.$ = $$[$0-1]; this.$.value.push($$[$0]); 
break;
case 26:
 this.$ = { type: 'HyphenList', value: [ $$[$0] ] } 
break;
case 28:
 this.$ = { type: 'Unary', value: $$[$0] } 
break;
case 29:
 this.$ = { type: 'Unary', exclamationList: $$[$0-1], value: $$[$0] } 
break;
case 30:
 this.$ = { type: 'Unary', hyphenList: $$[$0-1], value: $$[$0] } 
break;
case 31:
 this.$ = { type: 'Member', value: $$[$0] } 
break;
case 32:
 this.$ = { type: 'Member', left: $$[$0-2], right: $$[$0] } 
break;
case 33:
 this.$ = { type: 'Member', left: $$[$0-5], right: $$[$0-3], list: $$[$0-1] } 
break;
case 34:
 this.$ = { type: 'Member', left: $$[$0-3], list: $$[$0-1] } 
break;
case 35:
 this.$ = { type: 'Member', left: $$[$0-4], list: $$[$0-2] } 
break;
case 38:
 this.$ = null 
break;
case 40:
 this.$ = { type: 'Primary', dotOpt: $$[$0-1], value: $$[$0] } 
break;
case 41:
 this.$ = { type: 'Primary', dotOpt: $$[$0-5], value: $$[$0-4], list: $$[$0-2] } 
break;
case 42:
 this.$ = { type: 'Primary', brackets: 'parens', value: $$[$0-1] } 
break;
case 43:
 this.$ = { type: 'Primary', brackets: 'square', list: $$[$0-2] } 
break;
case 44:
 this.$ = { type: 'Primary', brackets: 'curly', list: $$[$0-2] } 
break;
case 46:
 this.$ = { type: 'Addition', left: $$[$0-2], right: $$[$0] } 
break;
case 47:
 this.$ = { type: 'Subtraction', left: $$[$0-2], right: $$[$0] } 
break;
case 48:
 this.$ = { type: 'Multiplication', left: $$[$0-2], right: $$[$0] } 
break;
case 49:
 this.$ = { type: 'Division', left: $$[$0-2], right: $$[$0] } 
break;
case 50:
 this.$ = { type: 'Modulo', left: $$[$0-2], right: $$[$0] } 
break;
case 55:
 this.$ = { type: 'ConditionalAnd', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 56:
 this.$ = { type: 'ConditionalOr', operator: $$[$0-1], left: $$[$0-2], right: $$[$0] } 
break;
case 57:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 58:
 this.$ = $$[$0-2]; this.$.value.push($$[$0]); 
break;
case 59:
 this.$ = { type: 'FieldInits', value: [ { type: 'FieldInit', left: $$[$0-2], right: $$[$0] } ] } 
break;
case 60:
 this.$ = $$[$0-4]; this.$.value.push({ type: 'FieldInit', left: $$[$0-2], right: $$[$0] }); 
break;
case 61:
 this.$ = { type: 'MapInits', value: [ { type: 'MapInit', left: $$[$0-2], right: $$[$0] } ] } 
break;
case 62:
 this.$ = $$[$0-4]; this.$.value.push({ type: 'MapInit', left: $$[$0-2], right: $$[$0] }); 
break;
}
},
table: [{3:1,4:2,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{1:[3]},{5:[1,27],35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh},o($Vi,[2,51],{22:36,23:[1,37],24:[1,38],25:[1,39],26:[1,40],27:[1,41],28:[1,42],29:[1,43],38:$Vj,42:$Vk,44:$Vl}),o($Vi,[2,52]),o($Vi,[2,53]),o($Vi,[2,54]),o($Vm,[2,31]),{20:44,21:$Vn},{4:46,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:48,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,40:47,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:50,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,50:49,51:5,53:6},o($Vm,[2,45]),{21:[2,39]},o($Vm,[2,10]),o($Vm,[2,11]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,2]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),{6:51,7:$V0},{6:52,7:$V0},o($Vm,[2,8]),o($Vm,[2,9]),{1:[2,1]},{4:53,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:54,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:55,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:56,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:57,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{20:58,21:$Vn},{4:59,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{20:61,21:$Vn,45:60},{6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,31:62,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8},o($Vo,[2,16]),o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vm,[2,40],{39:[1,63]}),o([5,23,24,25,26,27,28,29,35,38,39,41,42,43,44,47,48,52,54,55,56,61],[2,15]),{35:$Vd,41:[1,64],52:$Ve,54:$Vf,55:$Vg,56:$Vh},{43:$Vp,46:65,48:$Vq},o($Vr,[2,57],{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh}),{46:67,47:$Vp,48:[1,68]},{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh,61:[1,69]},o($Vm,[2,3]),o($Vm,[2,4]),o($Vs,[2,46],{54:$Vf,55:$Vg,56:$Vh}),o($Vs,[2,47],{54:$Vf,55:$Vg,56:$Vh}),o($Vi,[2,48]),o($Vi,[2,49]),o($Vi,[2,50]),o($Vm,[2,32],{39:[1,70]}),{35:$Vd,43:[1,71],52:$Ve,54:$Vf,55:$Vg,56:$Vh},{46:72,47:$Vp,48:[1,73]},{61:[1,74]},o($Vi,[2,23],{38:$Vj,42:$Vk,44:$Vl}),{4:48,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,40:75,42:$Vb,44:$Vc,49:8,51:5,53:6},o($Vm,[2,42]),{43:[1,76]},o([41,43],$Vt,{31:3,30:4,51:5,53:6,37:7,49:8,19:12,6:14,11:15,8:16,15:17,17:18,4:77,7:$V0,9:$V1,10:$V2,12:$V3,13:$V4,14:$V5,16:$V6,18:$V7,21:$V8,38:$V9,39:$Va,42:$Vb,44:$Vc}),{47:[1,78]},{4:79,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,47:$Vt,49:8,51:5,53:6},{4:80,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:48,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,40:81,42:$Vb,44:$Vc,49:8,51:5,53:6},o($Vm,[2,34]),{47:[1,82]},{20:83,21:$Vn,47:$Vt},{4:84,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{41:$Vp,46:85,48:$Vq},o($Vm,[2,43]),o($Vr,[2,58],{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh}),o($Vm,[2,44]),{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh,61:[1,86]},o($Vu,[2,61],{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh}),{41:[1,87],48:[1,88]},o($Vm,[2,35]),{61:[1,89]},o($Vu,[2,59],{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh}),{41:[1,90]},{4:91,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},o($Vm,[2,33]),{4:77,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},{4:92,6:14,7:$V0,8:16,9:$V1,10:$V2,11:15,12:$V3,13:$V4,14:$V5,15:17,16:$V6,17:18,18:$V7,19:12,21:$V8,30:4,31:3,37:7,38:$V9,39:$Va,42:$Vb,44:$Vc,49:8,51:5,53:6},o($Vm,[2,41]),o($Vu,[2,62],{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh}),o($Vu,[2,60],{35:$Vd,52:$Ve,54:$Vf,55:$Vg,56:$Vh})],
defaultActions: {13:[2,39],27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip end-of-line comments */
break;
case 1:/* skip whitespace */
break;
case 2:return 29
break;
case 3:return 'as' 
break;
case 4:return 'break' 
break;
case 5:return 'const' 
break;
case 6:return 'continue' 
break;
case 7:return 'else'
break;
case 8:return 'for' 
break;
case 9:return 'function' 
break;
case 10:return 'if' 
break;
case 11:return 'import' 
break;
case 12:return 'let'
break;
case 13:return 'loop' 
break;
case 14:return 'package' 
break;
case 15:return 'namespace' 
break;
case 16:return 'return'
break;
case 17:return 'var' 
break;
case 18:return 'void' 
break;
case 19:return 'while'
break;
case 20:return 48
break;
case 21:return 39
break;
case 22:return 41
break;
case 23:return 28
break;
case 24:return 33
break;
case 25:return 60
break;
case 26:return 52
break;
case 27:return 35
break;
case 28:return 54
break;
case 29:return 55
break;
case 30:return 56
break;
case 31:return 23
break;
case 32:return 24
break;
case 33:return 25
break;
case 34:return 26
break;
case 35:return 27
break;
case 36:return 44
break;
case 37:return 47
break;
case 38:return 21
break;
case 39:return 16
break;
case 40:return 16
break;
case 41:return 18
break;
case 42:return 7
break;
case 43:return 7
break;
case 44:return 7
break;
case 45:return 7
break;
case 46:return 12
break;
case 47:return 13
break;
case 48:return 14
break;
case 49:return 5
break;
case 50:return 'INVALID'
break;
}
},
rules: [/^(?:[/][/]\s.*\n)/,/^(?:\s+)/,/^(?:in\b)/,/^(?:as\b)/,/^(?:break\b)/,/^(?:const\b)/,/^(?:continue\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:let\b)/,/^(?:loop\b)/,/^(?:package\b)/,/^(?:namespace\b)/,/^(?:return\b)/,/^(?:var\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:!=)/,/^(?:!)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\{)/,/^(?:\})/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:[rR]?['](\\.|[^'\\n])*['])/,/^(?:[rR]?["](\\.|[^"\\n])*["])/,/^(?:[rR]?['''](\\.|[^'''])*['''])/,/^(?:[rR]?["""](\\.|[^"""])*["""])/,/^(?:[-]?([0-9]+|0x[0-9a-fA-F]+))/,/^(?:([0-9]+|0x[0-9a-fA-F]+)[uU])/,/^(?:[-]?[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+(\.[0-9]+)?)?)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


export { celParser };